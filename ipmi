#!/usr/bin/env python
#
# An Ansible module to allow playbooks to communicate with remote
# devices using IPMI.
#
# (c) Copyright 2015 Hewlett Packard Enterprise Development Company LP
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

DOCUMENTATION = '''
---
module: ipmi
author: Joe Fegan
short_description: Issue IPMI commands to network targets
description:
    - Issue commands to any device that implements IPMI, which includes most data
      center switches and other hardware, including nodes.
    - IPMI credentials and network addresses are specified in a YAML (or JSON) file.
options:
    credsfile:
        required: true
        description:
            - Path to a YAML or JSON file containing a list of system definitions.
            - The format of the file is described in the Examples section below.
    name:
        required: true
        description:
            - Id of the device to manage (as specified in the credentials file).
    retry_interval:
        required: false
        default: 5
        description:
            - Interval in seconds between connection retries.
    retry_max:
        required: false
        default: 12
        description:
            - Max number of connection retries.
    power:
        required: false
        description:
            - An IPMI power command to be sent to the target.
        choices: [ "status", "on", "off", "cycle", "reset" ]
    bootdev:
        required: false
        description:
            - A bootdev command to be sent to the target.
            - For example to boot from PXE first, disk first, etc.
        choices: [ "pxe", "disk", "safe", "cdrom", "floppy", "bios", "diag" ]
    options:
        required: false
        description:
            - Options for the bootdev command, see IPMI documentation.
    passthru:
        required: false
        description:
            - Any artibrary IPMI command, gets sent to the target verbatim.
            - This is a fallback for obscure commands. Any that you use regularly
              should be wrapped up in a proper handler like power and bootdev.
    sleep:
        required: false
        description:
            - Floating point value in seconds (or minutes if suffixed with an "m" character)
              for which the module should sleep after sending the command. Useful to avoid
              sending a flood of messages when calling this module in an Ansible loop.
'''

EXAMPLES = '''
- ipmi: credsfile="/srv/nodeinfo.yml" name=rabbit02 bootdev=pxe options=persistent
- ipmi: credsfile="/srv/nodeinfo.yml" name=rabbit02 power=cycle
- ipmi: credsfile="/srv/nodeinfo.yml" name=compute423 passthru="mc reset cold"

Typical YAML credentials file:
---
  servers:
    - id: "rabbit01"
      ilo-ip: "10.5.12.55"
      ilo-user: "admin"
      ilo-password: "m355ag3q1"

    - id: "rabbit02"
      ilo-ip: "10.5.12.56"
      ilo-user: "admin"
      ilo-password: "m355ag3q2"

    - id: "switch1"
      ilo-ip: "10.65.19.1"
      ilo-user: "swadmin"
      ilo-password: "5y5adm1n"

    - id: "moonshot01"
      ilo-ip: "10.70.23.45"
      ilo-user: "mnadmin"
      ilo-password: "whatever"
      ilo-extras: "-B0 -b7 -T82 -t24"
'''

import os
import re
import time
import yaml

# Take something like "Chassis Power Control: Up/On" and return
# the last word. The exact format of the input varies a lot on
# different types of h/w and even between f/w versions.
def parse_power_status(raw_status):
    return raw_status.split()[-1].split("/")[-1].lower()

# Input is something like "Set Boot Device to disk".
def parse_bootdev(raw_status):
    return raw_status.split()[-1].lower()


class Ipmi(object):
    def execv(self, cmd, **kwargs):
        return self.module.run_command(cmd, **kwargs)

    def fail(self, **kwargs):
        return self.module.fail_json(**kwargs)

    def succeed(self, **kwargs):
        if self.sleep:
            time.sleep(self.sleep)
        return self.module.exit_json(**kwargs)

    def __init__(self, module):
        self.module = module
        self.target = None

        try:
            self.node = module.params["name"]
            self.credsfile = module.params["credsfile"]
            self.bootdev = module.params["bootdev"]
            self.options = module.params["options"]
            self.power = module.params["power"]
            self.passthru = module.params["passthru"]
            self.retry_interval = int(module.params["retry_interval"])
            self.retry_max = int(module.params["retry_max"])
            secs = module.params["sleep"]
            if not secs:
                self.sleep = None
            elif secs[-1] == "m":
                self.sleep = 60.0 * float(secs[:-1])
            elif secs[-1] == "s":
                self.sleep = float(secs[:-1])
            else:
                self.sleep = float(secs)
        except ValueError as e:
            self.fail(msg="ipmi: " + str(e))

    def file_creds(self, fname):
        # this also accepts json input.
        data = yaml.safe_load(file(fname))
        creds = dict()
        ident = "id"
        iloip = "ilo-ip"
        ilouser = "ilo-user"
        ilopassword = "ilo-password"
        # allows for devices that need more complex IPMI addressing.
        iloextras = "ilo-extras"
        for srv in data["servers"]:
            if srv[ident] == self.node:
                creds["ip"] = srv[iloip]
                creds["user"] = srv[ilouser]
                creds["password"] = srv[ilopassword]
                if iloextras in srv:
                    creds["extras"] = srv[iloextras].split(" ")

                break
        return creds

    def get_creds(self, node):
        return self.file_creds(self.credsfile)

    def set_target(self, node):
        creds = self.get_creds(node)
        # we're in a subprocess, so our environment should be private and
        # a reasonably secure way to provide the password to ipmitool.
        os.environ["IPMI_PASSWORD"] = creds["password"]
        self.target = ["ipmitool", "-I", "lanplus", "-E",
                       "-N", str(self.retry_interval),
                       "-R", str(self.retry_max),
                       "-U", creds["user"],
                       "-H", creds["ip"]]
        if "extras" in creds:
            self.target += creds["extras"]

    # This will send any ipmi command you like to the target and return its
    # stdout and stderr. I thought twice about providing this, because the
    # proper thing to do is to create custom handlers for specific actions
    # (like action_power below), but in the end passthru is pragmatic for
    # rarely used commands. It can't populate the Ansible "changed" field
    # because it has no idea what the command was.
    def action_passthru(self, action):
        cmd = self.target + action.split()
        rc, out, err = self.execv(cmd, check_rc=True)
        result = dict(rc=rc, stdout=out, stderr=err)
        self.succeed(**result)

    # This sends ipmi "power" commands to the target and returns a proper
    # "changed" status to Ansible by inspecting the before and after state.
    # It also parses stdout of the reply and returns a simple "on" or "off"
    # value, which is much easier to cope with in a playbook.
    def action_power(self, action):
        cmd = self.target + ["power", "status"]
        rc, out, err = self.execv(cmd, check_rc=True)
        before = parse_power_status(out)

        desired = action.strip().lower()
        if desired == "status" or desired == before:
            after = before
        else:
            cmd = self.target + ["power", action]
            rc, out, err = self.execv(cmd, check_rc=True)
            after = parse_power_status(out)

        result = dict(power=after, changed=(before != after))
        self.succeed(**result)

    # This sends ipmi "bootdev" commands to the target. I can't find a way
    # to query the current bootdev through IPMI so can't return a proper
    # "changed" status to Ansible for this one.
    def action_bootdev(self, action):
        cmd = self.target + ["chassis", "bootdev", action]
        if self.options:
            cmd.append("options=%s" % self.options)
        rc, out, err = self.execv(cmd, check_rc=True)
        dev = parse_bootdev(out)
        if len(dev) == 0:
            self.fail(msg="ipmi: can't parse bootdev response", stdout=out, stderr=err)
        result = dict(bootdev=dev, options=self.options, changed=True)
        self.succeed(**result)

    def execute(self):
        try:
            self.set_target(self.node)

            action = self.bootdev
            if action:
                return self.action_bootdev(action)

            action = self.power
            if action:
                return self.action_power(action)

            action = self.passthru
            if action:
                return self.action_passthru(action)

            self.fail(msg="usage: ipmi name=<node> <action>")
        except Exception as e:
            self.fail(msg="ipmi: " + str(e))


def main():
    module = AnsibleModule(
        argument_spec=dict(
            name=dict(required=True),
            credsfile=dict(required=False),
            bootdev=dict(required=False, default=None),
            options=dict(required=False, default=None),
            power=dict(required=False, default=None),
            passthru=dict(required=False, default=None),
            sleep=dict(required=False, default=None),
            retry_interval=dict(required=False, default=5),
            retry_max=dict(required=False, default=12)
        )
    )

    ipmi = Ipmi(module)
    return ipmi.execute()


from ansible.module_utils.basic import *
main()
